4. Autoencoder (normal vs fraud)
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models

dataset = pd.read_csv("/content/creditcard.csv")

# Preprocess the data
# You may need to normalize the data, handle missing values, etc.
# For simplicity, we'll perform normalization in this example
# Normalize the data to have a mean of 0 and a standard deviation of 1
scaler = StandardScaler()
X = scaler.fit_transform(dataset.values)
y = X

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build and train the Autoencoder model
input_dim = X_train.shape[1]

# Encoder
encoder = models.Sequential([
    layers.Input(shape=(input_dim,)),
    layers.Dense(32, activation='relu'),
    layers.Dense(16, activation='relu') #Encoder output shape is (None, 16)
])
#Decoder
decoder = models.Sequential([
    layers.Input(shape=(16,)),
    layers.Dense(16, activation='relu'),
    layers.Dense(32, activation='relu'),
    layers.Dense(input_dim, activation='linear')  # Use linear activation for reconstruction
])
autoencoder = models.Sequential([encoder, decoder])
autoencoder.compile(optimizer='adam', loss='mean_squared_error',metrics = ['accuracy'])
autoencoder.fit(X_train, X_train, epochs=20, batch_size=32, shuffle=True)

# Detect anomalies
y_pred = autoencoder.predict(X_test)
mse = np.mean(np.power(X_test - y_pred, 2), axis=1)
# Define a threshold for anomaly detection
threshold = np.percentile(mse, 99.80)  # Adjust the percentile as needed
# Predict anomalies
anomalies = mse > threshold
# Calculate the number of anomalies
num_anomalies = np.sum(anomalies)
print(f"Number of Anomalies: {num_anomalies}")

# Plot the anomalies
plt.figure(figsize=(12, 6))
plt.plot(mse, marker='o', linestyle='', markersize=3, label='MSE')
plt.axhline(threshold, color='r', linestyle='--', label='Anomaly Threshold')
plt.xlabel('Sample Index')
plt.ylabel('MSE')
plt.title('Anomaly Detection Results')
plt.legend()
plt.show()

import seaborn as sns
plt.figure(figsize=(6, 4.75))
sns.heatmap(confusion_matrix(anomalies, anomalies), annot=True, annot_kws={"size": 16}, fmt='d',
            xticklabels=['Normal', 'Fraud'],  # Change x-axis labels
            yticklabels=['No', 'Anomaly'])  # Change y-axis labels
plt.xlabel("Predicted label", fontsize=14)
plt.ylabel("True label", fontsize=14)
plt.title("Confusion Matrix", fontsize=14)
plt.grid(False)
plt.show()